mean(1,2,3)
mean(c(1,2,3))
library("readxl")
Data1 = read_excel("Excelusssy.xlsx", sheet="Problem")
Data2 = read_excel("Excelusssy.xlsx", sheet="Problem2")
Data3 = read_excel("Excelusssy.xlsx", sheet="Problem3")
Data4 = read_excel("Excelusssy.xlsx", sheet="Problem4")
Data5 = read_excel("Excelusssy.xlsx", sheet="Problem5")
Data6 = read_excel("Excelusssy.xlsx", sheet="Problem6")
p=c(0.05,0.45,0.45,0.05)
ExpertsS=c()
for (i in seq(1,5)){
ExpertsS[[i]]=c(0,0,0,0)
}
for (j in seq(1,5)){
k=paste("Data",as.character(j),sep='')
Data = get(k)
for (i in seq(1,5)){
if (Data$Data[1] < Data[[i+1]][1]){
ExpertsS[[i]]=ExpertsS[[i]]+c(1,0,0,0)
}
if (Data$Data[1] < Data[[i+1]][2] & Data$Data[1] >= Data[[i+1]][1]){
ExpertsS[[i]]=ExpertsS[[i]]+c(0,1,0,0)
}
if (Data$Data[1] <= Data[[i+1]][3] & Data$Data[1] >= Data[[i+1]][2]){
ExpertsS[[i]]=ExpertsS[[i]]+c(0,0,1,0)
}
if (Data$Data[1] > Data[[i+1]][3]){
ExpertsS[[i]]=ExpertsS[[i]]+c(0,0,0,1)
}
}
}
for (i in seq(1,5)){
ExpertsS[[i]]= ExpertsS[[i]]/5
}
I=function(i,p){
Rel=0
for (k in seq(1,4)){
if (ExpertsS[[i]][k] !=0){
Rel=Rel+(ExpertsS[[i]][k]*log(ExpertsS[[i]][k]/p[k]))
}
}
return(Rel)
}
Cal=function(RelInformation){
1-pchisq(2*5*RelInformation,df=3)
}
CalibrationScores=c()
for (i in seq(1,5)){
CalibrationScores[i]=Cal(I(i,p))
}
InformationScore = function(j){
}
CalibrationScores
View(Data1)
View(Data)
View(Data1)
View(Data)
U=c(1-0.1*199,0.00044-0.1*(100-0.00044),300000-0.1*(60000000-300000),10-0.1*(1000-10),0.1-0.1*(1000-0.1))
L=c(200+0.1*199,100+0.1*(100-0.00044),60000000+0.1*(60000000-300000),1000+0.1*(1000-10),1000+0.1*(1000-0.1))
View(ExpertsS)
View(Data1)
Data1[1]
Data1[2]
Data[2][[1]]
Data[[2]][1]
Data1[[2]][1]
Data1
Data1[[2]]
SampleData=(rep(5,5))
SampleData
SampleData=c(rep(5,5),rep(20,90))
SampleData
SampleData=c(rep(5,5),rep(20,90)),rep(200,5))
SampleData=c(rep(5,5),rep(20,90)),rep(200,5)
SampleData=c(rep(5,5),rep(20,90),rep(200,5))
cdf=ecdf(SampleData)
plot(cdf)
plot(cdf,type='l')
evaluate(5)
evaluate()
InformationScore = function(j){
r = c()
Information=0
for(i in seq(1,5)){
k=paste("Data",as.character(i),sep='')
Data=get(k)
r[[i]]=c((Data[[j+1]][1]-L[i])/(U[i]-L[i]),(Data[[j+1]][2]-Data[[j+1]][1])/(U[i]-L[i]),(Data[[j+1]][3]-Data[[j+1]][2])/(U[i]-L[i]),(U[i]-Data[[j+1]][3])/(U[i]-L[i]))
}
for (l in seq(1,5)){
for (i in seq(1,4)){
Information = Information + p[i]*log(p[i]/r[[l]][i])
}
}
return(c(Information/5,r))
}
InformationScores = c()
for (i in seq(1,5)){
InformationScores=append(InformationScores,InformationScore(i)[1])
}
InformationScore(1)
for (i in seq(1,5)){
CalibrationScores[i]=Cal(I(i,p))
}
L=c(1-0.1*199,0.00044-0.1*(100-0.00044),300000-0.1*(60000000-300000),10-0.1*(1000-10),0.1-0.1*(1000-0.1))
U=c(200+0.1*199,100+0.1*(100-0.00044),60000000+0.1*(60000000-300000),1000+0.1*(1000-10),1000+0.1*(1000-0.1))
InformationScore = function(j){
r = c()
Information=0
for(i in seq(1,5)){
k=paste("Data",as.character(i),sep='')
Data=get(k)
r[[i]]=c((Data[[j+1]][1]-L[i])/(U[i]-L[i]),(Data[[j+1]][2]-Data[[j+1]][1])/(U[i]-L[i]),(Data[[j+1]][3]-Data[[j+1]][2])/(U[i]-L[i]),(U[i]-Data[[j+1]][3])/(U[i]-L[i]))
}
for (l in seq(1,5)){
for (i in seq(1,4)){
Information = Information + p[i]*log(p[i]/r[[l]][i])
}
}
return(c(Information/5,r))
}
InformationScores = c()
for (i in seq(1,5)){
InformationScores=append(InformationScores,InformationScore(i)[1])
}
DecisionMaker = function(alpha){
}
InformationScore(1)
x=InformationScore(1)
L=c(1-0.1*199,0.00044-0.1*(100-0.00044),300000-0.1*(60000000-300000),10-0.1*(1000-10),0.1-0.1*(1000-0.1))
U=c(200+0.1*199,100+0.1*(100-0.00044),60000000+0.1*(60000000-300000),1000+0.1*(1000-10),1000+0.1*(1000-0.1))
InformationScore = function(j){
r = c()
Information=0
for(i in seq(1,5)){
k=paste("Data",as.character(i),sep='')
Data=get(k)
r[[i]]=c((Data[[j+1]][1]-L[i])/(U[i]-L[i]),(Data[[j+1]][2]-Data[[j+1]][1])/(U[i]-L[i]),(Data[[j+1]][3]-Data[[j+1]][2])/(U[i]-L[i]),(U[i]-Data[[j+1]][3])/(U[i]-L[i]))
}
for (l in seq(1,5)){
for (i in seq(1,4)){
Information = Information + p[i]*log(p[i]/r[[l]][i])
}
}
x=c()
x[[1]]=Information/5
x[[2]]=r
return(x)
}
InformationScores = c()
for (i in seq(1,5)){
InformationScores=append(InformationScores,InformationScore(i)[1])
}
DecisionMaker = function(alpha){
}
x=InformationScore(1)
x
InformationScore = function(j){
r = c()
Information=0
for(i in seq(1,5)){
k=paste("Data",as.character(i),sep='')
Data=get(k)
r[[i]]=c((Data[[j+1]][1]-L[i])/(U[i]-L[i]),(Data[[j+1]][2]-Data[[j+1]][1])/(U[i]-L[i]),(Data[[j+1]][3]-Data[[j+1]][2])/(U[i]-L[i]),(U[i]-Data[[j+1]][3])/(U[i]-L[i]))
}
for (l in seq(1,5)){
for (i in seq(1,4)){
Information = Information + p[i]*log(p[i]/r[[l]][i])
}
}
x=c()
x[1]=Information/5
x[2]=r
return(x)
}
InformationScores = c()
for (i in seq(1,5)){
InformationScores=append(InformationScores,InformationScore(i)[1])
}
L=c(1-0.1*199,0.00044-0.1*(100-0.00044),300000-0.1*(60000000-300000),10-0.1*(1000-10),0.1-0.1*(1000-0.1))
U=c(200+0.1*199,100+0.1*(100-0.00044),60000000+0.1*(60000000-300000),1000+0.1*(1000-10),1000+0.1*(1000-0.1))
InformationScore = function(j){
r = c()
Information=0
for(i in seq(1,5)){
k=paste("Data",as.character(i),sep='')
Data=get(k)
r[[i]]=c((Data[[j+1]][1]-L[i])/(U[i]-L[i]),(Data[[j+1]][2]-Data[[j+1]][1])/(U[i]-L[i]),(Data[[j+1]][3]-Data[[j+1]][2])/(U[i]-L[i]),(U[i]-Data[[j+1]][3])/(U[i]-L[i]))
}
for (l in seq(1,5)){
for (i in seq(1,4)){
Information = Information + p[i]*log(p[i]/r[[l]][i])
}
}
x=c()
x=Information/5
y=r
return(c(x,y))
}
InformationScores = c()
for (i in seq(1,5)){
InformationScores=append(InformationScores,InformationScore(i)[1])
}
DecisionMaker = function(alpha){
}
InformationScores
x=InformationScore(1)
x
x[1]
x[2]
x[3]
x[4]
x[5]
x[6]
x[7]
seq(1,500,30)
Data1[[2]][1]
x=InformationScore(1)
x
x=x[2,5]
x[c(1,5)]=x[c(2,6)]
x
x=(1,2,3,4,5,6,7,8,9)
x=c(1,2,3,4,5,6,7,8,9)
x[c(seq(1,5))]
x[seq(1,5)]
r=InformationScore(1)[seq(2,6)]
r
r[[1]][2]
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[question]][1]*x[i]
}
}
}
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[question]][1]*x[i]
}
}
return(x,y)
}
CustomCDF(1,1)
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
return(x,y)
}
DecisionMaker = function(alpha){
}
CustomCDF(1,1)
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
return(c(x,y))
}
DecisionMaker = function(alpha){
}
ew
3
}
f
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
return(c(x,y))
}
CustomCDF(1,1)
L
a=CustomCDF(1,1)
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
Return[1]=x
Return[2]=y
return(c(x,y))
}
DecisionMaker = function(alpha){
}
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
Return[1]=x
Return[2]=y
return(c(x,y))
}
a=CustomCDF(1,1)
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
Return=c()
Return[1]=x
Return[2]=y
return(c(x,y))
}
a=CustomCDF(1,1)
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
k=paste("Data",as.character(Question),sep='')
stop
quit
}
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
Return=c()
Return[[1]]=x
Return[[2]]=y
return(c(x,y))
}
a=CustomCDF(1,1)
a
a[[1]]
a[[2]]
x=c()
x[[1]]=c(1,23)
x[[2]]=c(2,34)
x
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
Return=c()
Return[[1]]=x
Return[[2]]=y
return(Return)
}
a=CustomCDF(1,1)
a
plot(a)
plot(a[1],a[2])
plot(a[[1]],a[[2]])
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
print(r)
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
Return=c()
Return[[1]]=x
Return[[2]]=y
return(Return)
}
a=CustomCDF(1,1)
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=seq(rep(0,length(x)))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
print(i)
}
}
Return=c()
Return[[1]]=x
Return[[2]]=y
return(Return)
}
a=CustomCDF(1,1)
L[1]
U[1]
x=seq(L[Question],U[Question],0.1)
x=seq(L[1],U[1],0.1)
x
a
a[[2]]
#Need to make the cdf's of 5 experts for 5 questions
CustomCDF = function(Expert,Question){
r=InformationScore(Expert)[seq(2,6)]
k=paste("Data",as.character(Question),sep='')
Data=get(k)
x=seq(L[Question],U[Question],0.1)
y=rep(0,length(x))
for (i in seq(1,length(x))){
if (x[i] <= Data[[Expert+1]][1]){
y[i]=r[[Question]][1]*x[i]
}
}
Return=c()
Return[[1]]=x
Return[[2]]=y
return(Return)
}
a=CustomCDF(1,1)
plot(a[[1]],a[[2]])
plot(c(2,3),c(4,5))
